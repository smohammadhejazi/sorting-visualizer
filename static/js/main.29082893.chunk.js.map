{"version":3,"sources":["utils/animation.js","utils/swap.js","utils/animate.js","algorithms/bubbleSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/heapSort.js","components/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Animation","firstBar","secondBar","action","this","swap","array","i","j","temp","animate","animations","animationSpeed","setArray","setComparingIdxes","setSorted","setButtonDisabled","console","log","act","compare","setTimeout","exact","length","Object","freeze","bubbleSort","arrayCopy","slice","push","mergeSort","merge","arr","l","m","r","n1","n2","L","Array","R","k","doSort","parseInt","quickSort","partition","start","end","pivot","heapSort","heapify","arrSize","rootIdx","largest","leftNodeIdx","rightNodeIdx","Math","floor","MAX_NUMBER","MIN_NUMBER","randomNumber","min","max","random","SortingVisualizer","useState","comparigIdxes","sorted","buttonDisabled","numberOfBars","setNumberOfBars","setAnimationSpeed","useEffect","generateArray","size","fill","map","className","disabled","onClick","Slider","defaultValue","step","onChange","event","newValue","newSpeed","style","color","value","idx","first","second","height","width","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29082893.chunk.js","sourcesContent":["export default class Animation{\r\n    static act = Object.freeze({\"compare\":0, \"swap\":1, \"exact\":2})\r\n\r\n    constructor(firstBar, secondBar, action)\r\n    {\r\n        this.firstBar = firstBar\r\n        this.secondBar = secondBar\r\n        this.action = action\r\n    }\r\n}","export default function swap(array, i, j) {\r\n    let temp = array[i]\r\n    array[i] = array[j]\r\n    array[j] = temp\r\n}","import Animation from '../utils/animation.js'\r\nimport swap from '../utils/swap.js'\r\n\r\nexport default function animate(animations, animationSpeed, array, setArray, setComparingIdxes, setSorted, setButtonDisabled) {\r\n    console.log(animationSpeed);\r\n    setButtonDisabled(true)\r\n    setSorted(false)\r\n\r\n    for (let i = 0; i < animations.length; i++) {\r\n        if (animations[i].action === Animation.act.compare) {\r\n            setTimeout(() => setComparingIdxes({ 'first': animations[i].firstBar, 'second': animations[i].secondBar }), i * animationSpeed)\r\n        }\r\n        else if (animations[i].action === Animation.act.swap) {\r\n            setTimeout(() => {\r\n                swap(array, animations[i].firstBar, animations[i].secondBar)\r\n                setArray(array)\r\n            }, i * animationSpeed)\r\n        }\r\n        else if (animations[i].action === Animation.act.exact) {\r\n            setTimeout(() => {\r\n                array[animations[i].firstBar] = animations[i].secondBar\r\n                setArray(array)\r\n            }, i * animationSpeed)\r\n        }\r\n    }\r\n    setTimeout(() => {\r\n        setComparingIdxes({ 'first': null, 'second': null })\r\n        setSorted(true)\r\n        setButtonDisabled(false)\r\n    }, animations.length * animationSpeed)\r\n}","import '../utils/animation.js'\r\nimport animate from '../utils/animate.js'\r\nimport swap from '../utils/swap.js'\r\nimport Animation from '../utils/animation.js'\r\n\r\nconst bubbleSort = (array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed) => {\r\n    const arrayCopy = array.slice()\r\n    const animations = []\r\n\r\n    for (let i = 0; i < arrayCopy.length; i++) {\r\n        for (let j = 0; j < arrayCopy.length - i - 1; j++) {\r\n            animations.push(new Animation(j, j + 1, Animation.act.compare))\r\n            if (arrayCopy[j] > arrayCopy[j + 1]) {\r\n                animations.push(new Animation(j, j + 1, Animation.act.swap))\r\n                swap(arrayCopy, j, j + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    animate(animations, animationSpeed, array, setArray, setComparingIdxes, setSorted, setButtonDisabled)\r\n}\r\n\r\nexport default bubbleSort;","import '../utils/animation.js'\r\nimport animate from '../utils/animate.js'\r\nimport Animation from '../utils/animation.js'\r\n\r\nconst mergeSort = (array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed) => {\r\n    const arrayCopy = array.slice()\r\n    let animations = []\r\n\r\n    const doSort = (arr, l, r) => {\r\n        if (l >= r) {\r\n            return\r\n        }\r\n\r\n        let m = l + parseInt((r - l) / 2)\r\n        doSort(arr, l, m)\r\n        doSort(arr, m + 1, r)\r\n        merge(arr, l, m, r)\r\n    }\r\n\r\n    const merge = (arr, l, m, r) => {\r\n        let n1 = m - l + 1\r\n        let n2 = r - m\r\n\r\n        let L = new Array(n1)\r\n        let R = new Array(n2)\r\n\r\n        for (let i = 0; i < n1; i++)\r\n            L[i] = arr[l + i]\r\n        for (let j = 0; j < n2; j++)\r\n            R[j] = arr[m + 1 + j]\r\n\r\n        let i = 0\r\n        let j = 0\r\n        let k = l\r\n\r\n        while (i < n1 && j < n2) {\r\n            if (L[i] <= R[j]) {\r\n                animations.push(new Animation(k, l + i, Animation.act.compare))\r\n                animations.push(new Animation(k, L[i], Animation.act.exact))\r\n                arr[k] = L[i]\r\n                i++\r\n            }\r\n            else {\r\n                animations.push(new Animation(k, m + 1 + j, Animation.act.compare))\r\n                animations.push(new Animation(k, R[j], Animation.act.exact))\r\n                arr[k] = R[j]\r\n                j++\r\n            }\r\n            k++\r\n        }\r\n\r\n        while (i < n1) {\r\n            animations.push(new Animation(k, l + i, Animation.act.compare))\r\n            animations.push(new Animation(k, L[i], Animation.act.exact))\r\n            arr[k] = L[i]\r\n            i++\r\n            k++\r\n        }\r\n\r\n        while (j < n2) {\r\n            animations.push(new Animation(k, m + 1 + j, Animation.act.compare))\r\n            animations.push(new Animation(k, R[j], Animation.act.exact))\r\n            arr[k] = R[j]\r\n            j++\r\n            k++\r\n        }\r\n    }\r\n    \r\n    doSort(arrayCopy, 0, arrayCopy.length - 1)\r\n    animate(animations, animationSpeed, array, setArray, setComparingIdxes, setSorted, setButtonDisabled)\r\n}\r\n\r\nexport default mergeSort","import '../utils/animation.js'\r\nimport animate from '../utils/animate.js'\r\nimport swap from '../utils/swap.js'\r\nimport Animation from '../utils/animation.js'\r\n\r\nconst quickSort = (array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed) => {\r\n    const arrayCopy = array.slice()\r\n    const animations = []\r\n\r\n    const doSort = (arr, start, end) => {\r\n        if (start < end) {\r\n            let pivot = partition(arr, start, end)\r\n            doSort(arr, start, pivot - 1)\r\n            doSort(arr, pivot + 1, end)\r\n        }\r\n    }\r\n\r\n    const partition = (arr, start, end) => {\r\n        let j = start\r\n        for (let i = start; i < end; i++)\r\n        {\r\n            animations.push(new Animation(i, end, Animation.act.compare))\r\n            if (arr[i] < arr[end])\r\n            {\r\n                animations.push(new Animation(i, j, Animation.act.swap))\r\n                swap(arr, i, j)\r\n                j++\r\n            }\r\n        }\r\n\r\n        animations.push(new Animation(j, end, Animation.act.swap))\r\n        swap(arr, j, end)\r\n        return j\r\n    }\r\n\r\n    doSort(arrayCopy, 0, arrayCopy.length - 1)\r\n    animate(animations, animationSpeed, array, setArray, setComparingIdxes, setSorted, setButtonDisabled)\r\n}\r\n\r\nexport default quickSort;","import '../utils/animation.js'\r\nimport animate from '../utils/animate.js'\r\nimport swap from '../utils/swap.js'\r\nimport Animation from '../utils/animation.js'\r\n\r\nconst heapSort = (array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed) => {\r\n    const arrayCopy = array.slice()\r\n    const animations = []\r\n\r\n    const doSort = (arr) => {\r\n        for (let i = Math.floor(arr.length / 2) - 1; i >= 0; i--)\r\n            heapify(arr, arr.length, i)\r\n        \r\n        for (let i = arr.length - 1; i > 0; i--)\r\n        {\r\n            animations.push(new Animation(i, 0, Animation.act.compare))\r\n            animations.push(new Animation(i, 0, Animation.act.swap))\r\n            swap(arr, i, 0)\r\n            heapify(arr, i, 0)\r\n        }\r\n    }\r\n\r\n    const heapify = (arr, arrSize, rootIdx) => {\r\n\r\n        let largest = rootIdx\r\n        let leftNodeIdx = rootIdx * 2 + 1\r\n        let rightNodeIdx = rootIdx * 2 + 2\r\n\r\n        \r\n        if (leftNodeIdx < arrSize && arr[leftNodeIdx] > arr[largest])\r\n        {\r\n            animations.push(new Animation(leftNodeIdx, largest, Animation.act.compare))\r\n            largest = leftNodeIdx\r\n        }\r\n\r\n        \r\n        if (rightNodeIdx < arrSize && arr[rightNodeIdx] > arr[largest])\r\n        {\r\n            animations.push(new Animation(rightNodeIdx, largest, Animation.act.compare))\r\n            largest = rightNodeIdx\r\n        }\r\n        \r\n        if (largest !== rootIdx)\r\n        {\r\n            animations.push(new Animation(rootIdx, largest, Animation.act.compare))   \r\n            animations.push(new Animation(rootIdx, largest, Animation.act.swap))\r\n            swap(arr, rootIdx, largest)\r\n            heapify(arr, arrSize, largest)\r\n        }\r\n    }\r\n\r\n    doSort(arrayCopy)\r\n    animate(animations, animationSpeed, array, setArray, setComparingIdxes, setSorted, setButtonDisabled)\r\n}\r\n\r\nexport default heapSort;","import { useEffect, useState } from \"react\";\r\nimport { Slider } from \"@material-ui/core\";\r\nimport '../css/SortingVisualizer.css'\r\nimport bubbleSort from '../algorithms/bubbleSort.js'\r\nimport mergeSort from '../algorithms/mergeSort.js'\r\nimport quickSort from \"../algorithms/quickSort.js\";\r\nimport heapSort from \"../algorithms/heapSort.js\";\r\n\r\nconst MAX_NUMBER = 150\r\nconst MIN_NUMBER = 20\r\nconst MIN_DELAY = 5\r\nconst MAX_DELAY = 50\r\n\r\nconst SortingVisualizer = () => {\r\n    const [array, setArray] = useState([])\r\n    const [comparigIdxes, setComparingIdxes] = useState({ 'first': null, 'second': null })\r\n    const [sorted, setSorted] = useState(false)\r\n    const [buttonDisabled, setButtonDisabled] = useState(false)\r\n    const [numberOfBars, setNumberOfBars] = useState(85)\r\n    const [animationSpeed, setAnimationSpeed] = useState(5)\r\n\r\n    useEffect(() => {\r\n        generateArray(numberOfBars)\r\n    }, [numberOfBars])\r\n\r\n    const generateArray = (size) => {\r\n        setSorted(false)\r\n        setComparingIdxes({ 'first': null, 'second': null })\r\n        setArray(new Array(size).fill().map(() => randomNumber(MIN_NUMBER, MAX_NUMBER)))\r\n    }\r\n\r\n    const handleChange = (event, newValue) => {\r\n        if (numberOfBars !== newValue)\r\n        {\r\n            let newSpeed = MAX_DELAY - (((newValue - MIN_NUMBER) / (MAX_NUMBER - MIN_NUMBER)) * (MAX_DELAY - MIN_DELAY))\r\n            setNumberOfBars(newValue)\r\n            setAnimationSpeed(newSpeed)\r\n            generateArray(newValue)\r\n\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='container'>\r\n            <div className='buttons-container'>\r\n                <div className='generate-container'> \r\n                    <button className=\"button\" disabled={buttonDisabled} onClick={() => generateArray(numberOfBars)}>Generate</button>\r\n                </div>\r\n                <div className='slider-container'>\r\n                    <div className='slider-text'>Size of array</div>\r\n                    <Slider disabled={buttonDisabled} defaultValue={numberOfBars} step={1} min={MIN_NUMBER} max={MAX_NUMBER} onChange={handleChange} style={{color: 'white' }}/>\r\n                </div>\r\n                <div className='algorithms-container'>\r\n                    <button className=\"button\" disabled={buttonDisabled} onClick={() => bubbleSort(array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed)}>Bubble Sort</button>\r\n                    <button className=\"button\" disabled={buttonDisabled} onClick={() => mergeSort(array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed)}>Merge Sort</button>\r\n                    <button className=\"button\" disabled={buttonDisabled} onClick={() => quickSort(array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed)}>Quick Sort</button>\r\n                    <button className=\"button\" disabled={buttonDisabled} onClick={() => heapSort(array, setArray, setComparingIdxes, setSorted, setButtonDisabled, animationSpeed)}>Heap Sort</button>\r\n                </div>\r\n            </div>\r\n            <div className='bars-container'>\r\n                {array.map((value, idx) => (\r\n                    <div className={`bar ${(comparigIdxes.first === idx || comparigIdxes.second === idx) ? 'comparing-bar' : sorted ? 'sorted' : ''}`} key={idx} style={{\r\n                        height: `${(value - MIN_NUMBER) / (MAX_NUMBER - MIN_NUMBER) * 99 + 1}%`,\r\n                        width: `${100 / numberOfBars}%`,\r\n                    }}></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst randomNumber = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from 'react';\nimport SortingVisualizer from \"./components/SortingVisualizer.jsx\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer>\n      </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}